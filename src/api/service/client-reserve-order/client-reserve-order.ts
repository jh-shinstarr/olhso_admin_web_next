/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * OLHSO API
 * The OLHSO API description
 * OpenAPI spec version: 0.1
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AvailableReservationSlot,
  CheckAvailableTimeDto,
  ClientReserveOrderControllerGetAvailableReservationSlotListParams,
  ClientReserveOrderControllerMyReserveOrdersParams,
  ClientReserveOrderControllerRemoveMyReserveOrderParams,
  CreateOrderPaymentDto,
  CreateReserveOrderDto,
  Order,
  PaymentPreviewRes,
  ResendReceiptEmailDto,
  ReserveOrder,
  ReserveOrderList,
  UpdateDeliverInfoDto
} from '../../model'



  /**
 * @summary 예약 가능한 슬롯 조회
 */
export const clientReserveOrderControllerGetAvailableReservationSlotList = <TData = AxiosResponse<AvailableReservationSlot[]>>(
    date: string,
    params: ClientReserveOrderControllerGetAvailableReservationSlotListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/reserve-order/${date}/slots`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * @summary 예약 주문 미리보기
 */
export const clientReserveOrderControllerCreateOrderPreview = <TData = AxiosResponse<PaymentPreviewRes>>(
    createOrderPaymentDto: CreateOrderPaymentDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/olhso/client/me/reserve-order/previews`,
      createOrderPaymentDto,options
    );
  }
/**
 * @summary 예약 가능한 시각 확인
 */
export const clientReserveOrderControllerCheckAvailableTime = <TData = AxiosResponse<boolean>>(
    checkAvailableTimeDto: CheckAvailableTimeDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/olhso/client/me/rserve-order/check-available-time`,
      checkAvailableTimeDto,options
    );
  }
/**
 * @summary 단일 예약 주문 조회
 */
export const clientReserveOrderControllerFindOne = <TData = AxiosResponse<ReserveOrder>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/reserve-order/${id}`,options
    );
  }
/**
 * @summary 예약 주문 취소 혹은 삭제
 */
export const clientReserveOrderControllerRemoveMyReserveOrder = <TData = AxiosResponse<ReserveOrder>>(
    id: string,
    params: ClientReserveOrderControllerRemoveMyReserveOrderParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/olhso/client/me/reserve-order/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * @summary 영수증 조회
 */
export const clientReserveOrderControllerGetReceipt = <TData = AxiosResponse<Order>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/reserve-order/${id}/receipt`,options
    );
  }
/**
 * @summary 영수증 이메일 발송. request body를 비워서 보낼 경우 로그인된 사용자의 email을 사용
 */
export const clientReserveOrderControllerResendReceiptEmail = <TData = AxiosResponse<Order>>(
    id: string,
    resendReceiptEmailDto: ResendReceiptEmailDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/olhso/client/me/reserve-order/${id}/receipt-email`,
      resendReceiptEmailDto,options
    );
  }
/**
 * @summary 예약 주문 목록 조회
 */
export const clientReserveOrderControllerMyReserveOrders = <TData = AxiosResponse<ReserveOrderList>>(
    params?: ClientReserveOrderControllerMyReserveOrdersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/reserve-order`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * @summary 예약 주문 데이터 생성 최종버젼을 만들고 있습니다
 */
export const clientReserveOrderControllerCreate = <TData = AxiosResponse<ReserveOrder>>(
    createReserveOrderDto: CreateReserveOrderDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/olhso/client/me/reserve-order`,
      createReserveOrderDto,options
    );
  }
/**
 * @summary 예약 주문 배송 정보 수정
 */
export const clientReserveOrderControllerUpdateDeliveryInfo = <TData = AxiosResponse<ReserveOrder>>(
    id: string,
    updateDeliverInfoDto: UpdateDeliverInfoDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/olhso/client/me/reserve-order/${id}/delivery-info`,
      updateDeliverInfoDto,options
    );
  }
export type ClientReserveOrderControllerGetAvailableReservationSlotListResult = AxiosResponse<AvailableReservationSlot[]>
export type ClientReserveOrderControllerCreateOrderPreviewResult = AxiosResponse<PaymentPreviewRes>
export type ClientReserveOrderControllerCheckAvailableTimeResult = AxiosResponse<boolean>
export type ClientReserveOrderControllerFindOneResult = AxiosResponse<ReserveOrder>
export type ClientReserveOrderControllerRemoveMyReserveOrderResult = AxiosResponse<ReserveOrder>
export type ClientReserveOrderControllerGetReceiptResult = AxiosResponse<Order>
export type ClientReserveOrderControllerResendReceiptEmailResult = AxiosResponse<Order>
export type ClientReserveOrderControllerMyReserveOrdersResult = AxiosResponse<ReserveOrderList>
export type ClientReserveOrderControllerCreateResult = AxiosResponse<ReserveOrder>
export type ClientReserveOrderControllerUpdateDeliveryInfoResult = AxiosResponse<ReserveOrder>
