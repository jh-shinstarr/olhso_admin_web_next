/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * OLHSO API
 * The OLHSO API description
 * OpenAPI spec version: 0.1
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Client,
  ClientActivateDto,
  ClientCard,
  ClientCardList,
  ClientCouponControllerFindMyCouponsParams,
  ClientInfoDto,
  ClientOrderControllerMyOrdersParams,
  ClientPointControllerFindMyPointHistoryParams,
  ClientPointEventList,
  ClientPointRes,
  CreateClientCardDto,
  CreateOrderDto,
  CreateOrderPaymentDto,
  FindLastDeliveryTimeResult,
  MarketingAgreeDto,
  MyCouponList,
  NotificationAgreeDto,
  OkResponseDto,
  Order,
  OrderListForClientApp,
  OrderTipDto,
  PaymentPreviewRes,
  ResendReceiptEmailDto,
  SendSMSDto,
  UpdateNameDto,
  UpdatePhoneSoftDto,
  VerifySMSDto
} from '../../model'



  /**
 * @summary 현재 로그인 된 사용자의 정보를 백엔드에 요청합니다
 */
export const clientControllerUserInfo = <TData = AxiosResponse<ClientInfoDto>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client`,options
    );
  }
/**
 * @summary 사용자의 계정을 비활성화합니다
 */
export const clientControllerClientInactive = <TData = AxiosResponse<Client>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/olhso/client`,options
    );
  }
/**
 * @summary 사용자의 휴대폰 번호로 SMS 인증번호를 요청합니다
 */
export const clientControllerSendSMSCode = <TData = AxiosResponse<OkResponseDto>>(
    sendSMSDto: SendSMSDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/olhso/client/send-sms-code`,
      sendSMSDto,options
    );
  }
/**
 * @summary 사용자의 휴대폰 번호로 SMS 인증번호를 검증합니다
 */
export const clientControllerVerifySMSCode = <TData = AxiosResponse<Client>>(
    verifySMSDto: VerifySMSDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/olhso/client/verify-sms-code`,
      verifySMSDto,options
    );
  }
/**
 * @summary 사용자의 이름을 수정합니다.
 */
export const clientControllerUpdateName = <TData = AxiosResponse<Client>>(
    updateNameDto: UpdateNameDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/olhso/client/name`,
      updateNameDto,options
    );
  }
/**
 * @summary 사용자의 전화번호를 수정합니다. 문자발송 기능이 없는 상황에서 사용합니다
 */
export const clientControllerUpdatePhoneForSoftOpen = <TData = AxiosResponse<Client>>(
    updatePhoneSoftDto: UpdatePhoneSoftDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/olhso/client/phone`,
      updatePhoneSoftDto,options
    );
  }
/**
 * @summary 사용자의 마케팅 동의/거절 유무를 백엔드에 요청합니다
 */
export const clientControllerMarketingAgree = <TData = AxiosResponse<Client>>(
    marketingAgreeDto: MarketingAgreeDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/olhso/client/marketing-consent`,
      marketingAgreeDto,options
    );
  }
/**
 * @summary 사용자의 알림 동의/거절 유무를 백엔드에 요청합니다
 */
export const clientControllerNotificationAgree = <TData = AxiosResponse<Client>>(
    notificationAgreeDto: NotificationAgreeDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/olhso/client/notification-consent`,
      notificationAgreeDto,options
    );
  }
/**
 * @summary 사용자의 비활성화된 계정을 활성화합니다
 */
export const clientControllerClientActivate = <TData = AxiosResponse<OkResponseDto>>(
    clientActivateDto: ClientActivateDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/olhso/client/activate`,
      clientActivateDto,options
    );
  }
/**
 * @summary 카드 정보 조회
 */
export const clientCardControllerFindOne = <TData = AxiosResponse<ClientCard>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/cards/${id}`,options
    );
  }
/**
 * @summary 카드 제거 후 남은 카드 목록 반환
 */
export const clientCardControllerRemove = <TData = AxiosResponse<ClientCardList>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/olhso/client/me/cards/${id}`,options
    );
  }
/**
 * @summary primary 카드로 지정 후 전체 카드 목록 반환
 */
export const clientCardControllerChangeToPrimary = <TData = AxiosResponse<ClientCardList>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/olhso/client/me/cards/${id}/primary`,undefined,options
    );
  }
/**
 * @summary 클라이언트의 카드 목록 조회
 */
export const clientCardControllerMyCards = <TData = AxiosResponse<ClientCardList>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/cards`,options
    );
  }
/**
 * @summary 클라이언트 카드 생성
 */
export const clientCardControllerCreateMyCard = <TData = AxiosResponse<ClientCard>>(
    createClientCardDto: CreateClientCardDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/olhso/client/me/cards`,
      createClientCardDto,options
    );
  }
/**
 * @summary 나의 포인트 확인
 */
export const clientPointControllerGetMyPoint = <TData = AxiosResponse<ClientPointRes>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/rewards-sum`,options
    );
  }
/**
 * @summary 나의 포인트 사용 내역
 */
export const clientPointControllerFindMyPointHistory = <TData = AxiosResponse<ClientPointEventList>>(
    params?: ClientPointControllerFindMyPointHistoryParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/reward-history`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * @summary 나의 쿠폰 목록
 */
export const clientCouponControllerFindMyCoupons = <TData = AxiosResponse<MyCouponList>>(
    params?: ClientCouponControllerFindMyCouponsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/coupons`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * @summary 주문 미리보기
 */
export const clientOrderControllerCreateOrderPreview = <TData = AxiosResponse<PaymentPreviewRes>>(
    createOrderPaymentDto: CreateOrderPaymentDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/olhso/client/me/order/previews`,
      createOrderPaymentDto,options
    );
  }
/**
 * @summary 단일 주문 조회, orderItems로 주문 상세를 확인해주세요
 */
export const clientOrderControllerFindOne = <TData = AxiosResponse<Order>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/order/${id}`,options
    );
  }
/**
 * @summary 단일 주문 취소
 */
export const clientOrderControllerCancelOrder = <TData = AxiosResponse<Order>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/olhso/client/me/order/${id}`,options
    );
  }
/**
 * @summary 영수증 조회
 */
export const clientOrderControllerGetReceipt = <TData = AxiosResponse<Order>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/order/${id}/receipt`,options
    );
  }
/**
 * @summary 영수증 이메일 발송. request body를 비워서 보낼 경우 로그인된 사용자의 email을 사용
 */
export const clientOrderControllerResendReceiptEmail = <TData = AxiosResponse<Order>>(
    id: string,
    resendReceiptEmailDto: ResendReceiptEmailDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/olhso/client/me/order/${id}/receipt-email`,
      resendReceiptEmailDto,options
    );
  }
/**
 * @summary Tip 변경 업데이트
 */
export const clientOrderControllerUpdateTip = <TData = AxiosResponse<Order>>(
    id: string,
    orderTipDto: OrderTipDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/olhso/client/me/order/${id}/tip`,
      orderTipDto,options
    );
  }
/**
 * @summary 주문 목록 조회, findOrderType으로 현재 과거 구분, orderItems로 주문 상세를 확인해주세요
 */
export const clientOrderControllerMyOrders = <TData = AxiosResponse<OrderListForClientApp>>(
    params: ClientOrderControllerMyOrdersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/me/order`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * @summary 주문 생성
 */
export const clientOrderControllerCreateMyOrder = <TData = AxiosResponse<Order>>(
    createOrderDto: CreateOrderDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/olhso/client/me/order`,
      createOrderDto,options
    );
  }
/**
 * @summary 이미 주문된 주문 중 가장 마지막 배달 시간 조회
 */
export const clientOrderControllerFindLastDeliveryTime = <TData = AxiosResponse<FindLastDeliveryTimeResult>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/delivery-time`,options
    );
  }
export const clientOrderControllerFindManyTest = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/olhso/client/clean`,options
    );
  }
export type ClientControllerUserInfoResult = AxiosResponse<ClientInfoDto>
export type ClientControllerClientInactiveResult = AxiosResponse<Client>
export type ClientControllerSendSMSCodeResult = AxiosResponse<OkResponseDto>
export type ClientControllerVerifySMSCodeResult = AxiosResponse<Client>
export type ClientControllerUpdateNameResult = AxiosResponse<Client>
export type ClientControllerUpdatePhoneForSoftOpenResult = AxiosResponse<Client>
export type ClientControllerMarketingAgreeResult = AxiosResponse<Client>
export type ClientControllerNotificationAgreeResult = AxiosResponse<Client>
export type ClientControllerClientActivateResult = AxiosResponse<OkResponseDto>
export type ClientCardControllerFindOneResult = AxiosResponse<ClientCard>
export type ClientCardControllerRemoveResult = AxiosResponse<ClientCardList>
export type ClientCardControllerChangeToPrimaryResult = AxiosResponse<ClientCardList>
export type ClientCardControllerMyCardsResult = AxiosResponse<ClientCardList>
export type ClientCardControllerCreateMyCardResult = AxiosResponse<ClientCard>
export type ClientPointControllerGetMyPointResult = AxiosResponse<ClientPointRes>
export type ClientPointControllerFindMyPointHistoryResult = AxiosResponse<ClientPointEventList>
export type ClientCouponControllerFindMyCouponsResult = AxiosResponse<MyCouponList>
export type ClientOrderControllerCreateOrderPreviewResult = AxiosResponse<PaymentPreviewRes>
export type ClientOrderControllerFindOneResult = AxiosResponse<Order>
export type ClientOrderControllerCancelOrderResult = AxiosResponse<Order>
export type ClientOrderControllerGetReceiptResult = AxiosResponse<Order>
export type ClientOrderControllerResendReceiptEmailResult = AxiosResponse<Order>
export type ClientOrderControllerUpdateTipResult = AxiosResponse<Order>
export type ClientOrderControllerMyOrdersResult = AxiosResponse<OrderListForClientApp>
export type ClientOrderControllerCreateMyOrderResult = AxiosResponse<Order>
export type ClientOrderControllerFindLastDeliveryTimeResult = AxiosResponse<FindLastDeliveryTimeResult>
export type ClientOrderControllerFindManyTestResult = AxiosResponse<void>
